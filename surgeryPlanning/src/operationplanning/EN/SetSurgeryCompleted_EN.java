/*
 * Copyright (C) 2017 diana - All Rights Reserved
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * Althering the content of this licence under any circumstances is
 * strictly forbidden.
 * This application is part of a project developed during ERASMUS+ mobility
 * at University of Zaragoza, Spain.
 * This application is open-source and is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. 
 * 
 */
package operationplanning.EN;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import operationplanning.commonFiles.DatabaseQueries;
import operationplanning.commonFiles.MyUneditableTableModel;

/**
 *
 * @author diana
 */
public class SetSurgeryCompleted_EN extends javax.swing.JPanel {

    private static MyUneditableTableModel patientDetailsTableModel_EN;

    /**
     * Creates new form setSurgeryCopleted
     */
    public SetSurgeryCompleted_EN() {
        patientDetailsTableModel_EN = new MyUneditableTableModel(
                new String[]{"Patient Id", "First Name", "Last Name", "Surgery", "Pathology",
                    "Doctor Name", "Team Name", "Operating room", "Admission date",
                    "Scheduled date", "Completed"},
                0) //<editor-fold defaultstate="collapsed" desc="set column classes">
        {
            @Override
            public Class getColumnClass(int col) {
                String name = patientDetailsTableModel_EN.getColumnName(col);

                if (name.equals("Admission date") || name.equals("Scheduled date")) {
                    return Date.class;
                } else {
                    return java.lang.String.class;
                }
            }
        } //</editor-fold>
                ;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleDatePicker = new org.jdesktop.swingx.JXDatePicker();
        selectScheduleDateLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ScheduleDetailsTable = new javax.swing.JTable();
        setCompletedButton = new javax.swing.JButton();

        scheduleDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleDatePickerActionPerformed(evt);
            }
        });

        selectScheduleDateLabel.setText("Select schedule date:");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 300));

        ScheduleDetailsTable.setModel(patientDetailsTableModel_EN);
        jScrollPane1.setViewportView(ScheduleDetailsTable);

        setCompletedButton.setText("Set completed");
        setCompletedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCompletedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectScheduleDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(scheduleDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addGap(306, 306, 306))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(setCompletedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scheduleDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectScheduleDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(setCompletedButton)
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scheduleDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleDatePickerActionPerformed
        if (scheduleDatePicker == null || scheduleDatePicker.getDate() == null) {
            return;
        }

        DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
        DatabaseQueries db = new DatabaseQueries();
        Date selectedDate = scheduleDatePicker.getDate();
        String selectedDateString = outputFormatter.format(selectedDate);

        Calendar calendar = new GregorianCalendar();
        Vector<Vector<String>> scheduledPatientsDetails = db.getScheduledPatientsDetailsByDate(selectedDateString);

        while (patientDetailsTableModel_EN.getRowCount() > 0) {
            patientDetailsTableModel_EN.removeRow(0);
        }

        if (scheduledPatientsDetails == null) {
            return;
        }

        for (Vector<String> patientDetails : scheduledPatientsDetails) {
            LocalDate d = LocalDate.parse(patientDetails.get(8));
            calendar.set(d.getYear(), d.getMonthValue() - 1, d.getDayOfMonth());
            Date aDate = calendar.getTime();
            d = LocalDate.parse(patientDetails.get(9));
            calendar.set(d.getYear(), d.getMonthValue() - 1, d.getDayOfMonth());
            Date sDate = calendar.getTime();

            patientDetailsTableModel_EN.addRow(new Object[]{patientDetails.get(0).replace("P", ""),
                patientDetails.get(1), patientDetails.get(2), patientDetails.get(3),
                patientDetails.get(4), patientDetails.get(5), patientDetails.get(6),
                patientDetails.get(7), aDate, sDate, patientDetails.get(10)});
        }
    }//GEN-LAST:event_scheduleDatePickerActionPerformed

    private void setCompletedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCompletedButtonActionPerformed
        int row = ScheduleDetailsTable.getSelectedRow();
        if (-1 == row) {
            JOptionPane.showConfirmDialog(null,
                    "Please select a patient first.",
                    "Unknown patient and surgery",
                    JOptionPane.DEFAULT_OPTION);
            return;
        }

        int columnID = 0;
        int columnSurgery = 0;
        for (int i = 0; i < patientDetailsTableModel_EN.getColumnCount(); i++) {
            if ("Patient ID".equals(patientDetailsTableModel_EN.getColumnName(i))) {
                columnID = i;
                break;
            }
        }
        for (int i = 0; i < patientDetailsTableModel_EN.getColumnCount(); i++) {
            if ("Surgery".equals(patientDetailsTableModel_EN.getColumnName(i))) {
                columnSurgery = i;
                break;
            }
        }
        try {
            int patientID = Integer.parseInt((String) patientDetailsTableModel_EN.getValueAt(row, columnID));
            String srgName = (String) patientDetailsTableModel_EN.getValueAt(row, columnSurgery);
            int ans = JOptionPane.showOptionDialog(null, new JLabel(
                    "<html>Do you want to set completed surgery <br><b>"
                    + srgName
                    + "</b> for patient <b>"
                    + patientID + "</b> ?"),
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, 
                    null, null, JOptionPane.YES_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                DatabaseQueries db = new DatabaseQueries();

                db.setSurgeryCompleted("P" + patientID, db.getSurgeryId(srgName));
                scheduleDatePickerActionPerformed(null);
            }

        } catch (NumberFormatException e) {
            //selected column (with columnID) does not contain the ID for the patient
        }
    }//GEN-LAST:event_setCompletedButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ScheduleDetailsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker scheduleDatePicker;
    private javax.swing.JLabel selectScheduleDateLabel;
    private javax.swing.JButton setCompletedButton;
    // End of variables declaration//GEN-END:variables
}
