/*
 * Copyright (C) 2017 Diana Botez <dia.botez at gmail.com> - All Rights Reserved
 *
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * Althering the content of this licence under any circumstances is
 * strictly forbidden.
 * This application is part of a project developed during ERASMUS+ mobility
 * at University of Zaragoza, Spain.
 * This application is open-source and is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
package operationplanning.ES;

import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import operationplanning.commonFiles.DatabaseQueries;
import operationplanning.commonFiles.MedicIdentifiers;
import operationplanning.commonFiles.MedicalTeams;
import operationplanning.commonFiles.ORClass;
import operationplanning.commonFiles.ORData;
import operationplanning.commonFiles.OperationRooms;
import operationplanning.commonFiles.PatientIdentifiers;
import operationplanning.commonFiles.PatientsList;
import operationplanning.commonFiles.Utils;

/**
 *
 * @author Diana Botez <dia.botez at gmail.com>
 */
public class UpdatePatientPanel_ES extends javax.swing.JPanel {

    /**
     * Creates new form AddNewPatientPanelES
     */
    public UpdatePatientPanel_ES() {
        initComponents();

        genderButtonGroup.clearSelection();
        // <editor-fold defaultstate="collapsed" desc="Update the datas on combo box">
        updateSecondHalfInterface();
        //</editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        genderButtonGroup = new javax.swing.ButtonGroup();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        medicalTeamLabel = new javax.swing.JLabel();
        medicLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        medicalLeadComboBox = new javax.swing.JComboBox<>();
        medicsComboBox = new javax.swing.JComboBox<>();
        patientNumberLabel = new javax.swing.JLabel();
        patientNumberTextField = new javax.swing.JTextField();
        searchIDButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        surgeryLabel = new javax.swing.JLabel();
        patologyLabel = new javax.swing.JLabel();
        pathologyComboBox = new javax.swing.JComboBox<>();
        surgeryComboBox = new javax.swing.JComboBox<>();
        resetButton = new javax.swing.JButton();
        savePatientInfoButton = new javax.swing.JButton();
        addSurgeryRadioButton = new javax.swing.JRadioButton();
        updateSurgeryRadioButton = new javax.swing.JRadioButton();
        scheduledCheckBox = new javax.swing.JCheckBox();
        dateLabel = new javax.swing.JLabel();
        datePicker = new org.jdesktop.swingx.JXDatePicker();
        saveButton = new javax.swing.JButton();
        deleteSurgeryButton = new javax.swing.JButton();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        dateOfBirthLabel = new javax.swing.JLabel();
        birthDayFormattedTextField = new javax.swing.JFormattedTextField();
        birthMonthFormattedTextField = new javax.swing.JFormattedTextField();
        birthYearFormattedTextField = new javax.swing.JFormattedTextField();
        genderLabel = new javax.swing.JLabel();
        observationsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        searchByNameAndBirthdateButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(820, 540));
        setPreferredSize(new java.awt.Dimension(820, 540));

        lastNameLabel.setText("Apellido del paciente");
        lastNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        lastNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        lastNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        firstNameLabel.setText("Nombre del paciente");
        firstNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        firstNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        firstNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        medicalTeamLabel.setText("Equipo médico");
        medicalTeamLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        medicalTeamLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        medicalTeamLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        medicLabel.setText("Médico");
        medicLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        medicLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        medicLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        lastNameTextField.setToolTipText("The last name of the patient");
        lastNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        lastNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        lastNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        firstNameTextField.setToolTipText("The first name of the patient");
        firstNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        firstNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        firstNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        medicalLeadComboBox.setToolTipText("The medical team leader");
        medicalLeadComboBox.setMaximumSize(new java.awt.Dimension(32767, 40));
        medicalLeadComboBox.setMinimumSize(new java.awt.Dimension(350, 30));
        medicalLeadComboBox.setPreferredSize(new java.awt.Dimension(350, 30));
        medicalLeadComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalLeadComboBoxActionPerformed(evt);
            }
        });

        medicsComboBox.setToolTipText("The medic inside the team selected above");
        medicsComboBox.setMaximumSize(new java.awt.Dimension(32767, 40));
        medicsComboBox.setMinimumSize(new java.awt.Dimension(350, 30));
        medicsComboBox.setPreferredSize(new java.awt.Dimension(350, 30));

        patientNumberLabel.setText("ID del paciente");
        patientNumberLabel.setMaximumSize(new java.awt.Dimension(108000, 40));
        patientNumberLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        patientNumberLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        patientNumberTextField.setToolTipText("Add the patient number to be searched in the data base");
        patientNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        patientNumberTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        patientNumberTextField.setPreferredSize(new java.awt.Dimension(350, 30));
        patientNumberTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                patientNumberTextFieldFocusLost(evt);
            }
        });
        patientNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNumberTextFieldActionPerformed(evt);
            }
        });

        searchIDButton.setText("Buscar ID");
        searchIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIDButtonActionPerformed(evt);
            }
        });

        addButton.setText("Añadir cirurgia");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        surgeryLabel.setText("Cirugía");
        surgeryLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        surgeryLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        surgeryLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        patologyLabel.setText("Patología");
        patologyLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        patologyLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        patologyLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        pathologyComboBox.setToolTipText("The pathology for this patient");
        pathologyComboBox.setMaximumSize(new java.awt.Dimension(32767, 40));
        pathologyComboBox.setMinimumSize(new java.awt.Dimension(350, 30));
        pathologyComboBox.setPreferredSize(new java.awt.Dimension(350, 30));

        surgeryComboBox.setToolTipText("The surgery needed for the pathology above");
        surgeryComboBox.setMaximumSize(new java.awt.Dimension(32767, 40));
        surgeryComboBox.setMinimumSize(new java.awt.Dimension(350, 30));
        surgeryComboBox.setPreferredSize(new java.awt.Dimension(350, 30));
        surgeryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgeryComboBoxActionPerformed(evt);
            }
        });

        resetButton.setText("Reiniciar campos");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        savePatientInfoButton.setText("Guardar datos del paciente");
        savePatientInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatientInfoButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(addSurgeryRadioButton);
        addSurgeryRadioButton.setSelected(true);
        addSurgeryRadioButton.setText("Agregar una nueva cirugía para el paciente");
        addSurgeryRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSurgeryRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(updateSurgeryRadioButton);
        updateSurgeryRadioButton.setText("Actualizar la cirugía existente para el paciente");
        updateSurgeryRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSurgeryRadioButtonActionPerformed(evt);
            }
        });

        scheduledCheckBox.setText("Planificado");

        dateLabel.setText("Fecha");

        datePicker.getMonthView().setLowerBound(new Date());
        datePicker.getMonthView().setDayForeground(1, Color.red);
        datePicker.getMonthView().setDayForeground(7, Color.red);
        datePicker.setDate(null);

        saveButton.setText("Salvar cirurgia");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteSurgeryButton.setText("Borrar cirurgia");
        deleteSurgeryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSurgeryButtonActionPerformed(evt);
            }
        });

        genderButtonGroup.add(maleRadioButton);
        maleRadioButton.setSelected(true);
        maleRadioButton.setText("hombre");

        genderButtonGroup.add(femaleRadioButton);
        femaleRadioButton.setText("mujer");

        dateOfBirthLabel.setText("Fecha de nacimiento (dd/mm/aaaa)");

        birthDayFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthMonthFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthYearFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        genderLabel.setText("Género");

        observationsLabel.setText("Observación");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        observationTextArea.setColumns(20);
        observationTextArea.setLineWrap(true);
        observationTextArea.setRows(5);
        jScrollPane1.setViewportView(observationTextArea);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setToolTipText("");
        jSeparator1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        searchByNameAndBirthdateButton.setText("Búsqueda por nombre (y fecha de nacimiento)");
        searchByNameAndBirthdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameAndBirthdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genderLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maleRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(femaleRadioButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dateOfBirthLabel)
                            .addComponent(observationsLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(savePatientInfoButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(medicalTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(medicalLeadComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(resetButton)
                                    .addComponent(medicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(medicsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(scheduledCheckBox)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(118, 118, 118)
                                                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(datePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(deleteSurgeryButton)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(saveButton)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(addButton))))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(surgeryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(surgeryComboBox, 0, 1, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addSurgeryRadioButton)
                                    .addComponent(updateSurgeryRadioButton))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patologyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pathologyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(patientNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchIDButton)
                            .addComponent(searchByNameAndBirthdateButton))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchIDButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByNameAndBirthdateButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(genderLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(maleRadioButton)
                                    .addComponent(femaleRadioButton))
                                .addGap(18, 18, 18)
                                .addComponent(dateOfBirthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(observationsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(addSurgeryRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateSurgeryRadioButton)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(surgeryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(surgeryComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(patologyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pathologyComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(medicalTeamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(medicalLeadComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(medicLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(medicsComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(scheduledCheckBox)
                                    .addComponent(dateLabel)
                                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteSurgeryButton)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(savePatientInfoButton)))
                    .addComponent(jSeparator1))
                .addGap(272, 272, 272))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void medicalLeadComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalLeadComboBoxActionPerformed
        if (medicalLeadComboBox.getSelectedIndex() < 0) {
            medicalLeadComboBox.setSelectedIndex(-1);
            medicsComboBox.removeAllItems();
            medicsComboBox.setSelectedIndex(-1);
            return;
        }
        MedicalTeams medicInst = new MedicalTeams();

        MedicIdentifiers coordinator = medicInst.getDoctorByFullName((String) medicalLeadComboBox.getSelectedItem());
        if (coordinator == null) {
            medicsComboBox.removeAllItems();
            medicsComboBox.setSelectedIndex(-1);
            return;
        }
        int teamId = medicInst.getTeamIndexWithThisCoordinator(coordinator);
        if (teamId == -1) {
            medicsComboBox.removeAllItems();
            medicsComboBox.setSelectedIndex(-1);
            return;
        }

        medicsComboBox.removeAllItems();
        Vector<MedicIdentifiers> team = medicInst.getMedicalTeamByTeamId(teamId);
        medicsComboBox.addItem((String) medicalLeadComboBox.getSelectedItem());
        for (int j = 0; j < team.size(); j++) {
            medicsComboBox.addItem(team.get(j).lastName + " " + team.get(j).firstName);
        }
        medicsComboBox.setSelectedIndex(-1);

        if (addSurgeryRadioButton.isSelected()) {
            ;
        } else {
            MedicIdentifiers medicLead = medicInst.getDoctorByFullName((String) medicalLeadComboBox.getSelectedItem());
            DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");

            Vector<LocalDate> teamBookedLocalDates = new Vector<>();//dates available for this team
            Vector<Date> datesToMakeUnselectable = new Vector<>();

            Vector<ORClass> availableORs = new OperationRooms().getORsForTeam(medicInst.getTeamNameByTeamLeaderId(medicLead.IDnumber));
            for (ORClass room : availableORs) {
                Vector<ORData> bookings = room.getAvailableDates();
                for (ORData booking : bookings) {
                    String output = outputFormatter.format(booking.date);
                    teamBookedLocalDates.add(LocalDate.parse(output));
                }
            }//Get all the scheduled dates

            if (teamBookedLocalDates.isEmpty()) {
                Date[] date = {new Date()};
                datePicker.getMonthView().setUnselectableDates(date);
                datePicker.getMonthView().setUpperBound(date[0]);
                return;
            }
            teamBookedLocalDates.sort(null);//sort ascending

            LocalDate lastLocalDate = teamBookedLocalDates.lastElement();
            Calendar calendar = new GregorianCalendar();

            calendar.set(lastLocalDate.getYear(),
                    lastLocalDate.getMonthValue() - 1,
                    lastLocalDate.getDayOfMonth());
            Date lastDate = calendar.getTime();

            calendar.setTime(new Date()); // set start date = current date
            while (calendar.getTime().before(lastDate)) {
                Date aux = calendar.getTime();
                String output = outputFormatter.format(aux);
                LocalDate aux2 = LocalDate.parse(output);
                if (!teamBookedLocalDates.contains(aux2)) {
                    datesToMakeUnselectable.add(aux);
                }
                calendar.add(Calendar.DATE, 1);
            }

            Date[] datesToRemove = new Date[datesToMakeUnselectable.size()];
            datesToMakeUnselectable.toArray(datesToRemove);
            datePicker.getMonthView().setUnselectableDates(datesToRemove);
            datePicker.getMonthView().setUpperBound(lastDate);
        }
    }//GEN-LAST:event_medicalLeadComboBoxActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        patientNumberTextField.setText("");
        birthDayFormattedTextField.setText("");
        birthMonthFormattedTextField.setText("");
        birthYearFormattedTextField.setText("");
        observationsLabel.setText("");

        medicalLeadComboBox.removeAllItems();
        MedicalTeams medicInst = new MedicalTeams();
        Vector<Vector<String>> teamDetails = medicInst.getAllTeamDetails();
        for (Vector<String> teamDetail : teamDetails) {
            MedicIdentifiers coordinator = medicInst.getCoordinator(Integer.parseInt(teamDetail.get(0).replace("TM", "")));
            if (coordinator == null) {
                continue;
            }
            medicalLeadComboBox.addItem(coordinator.lastName + " " + coordinator.firstName);
        }
        medicalLeadComboBox.setSelectedIndex(-1);
        medicsComboBox.removeAllItems();

        //do the same for pathology and surgery
        surgeryComboBox.removeAllItems();
        pathologyComboBox.removeAllItems();
        pathologyComboBox.setSelectedIndex(-1);

        Vector<Vector<String>> surgeriesDetails = new DatabaseQueries().getAllSurgeriesDetails();

        if (surgeriesDetails == null || surgeriesDetails.isEmpty()) {
            surgeryComboBox.setSelectedIndex(-1);
            return;
        }

        for (Vector<String> surgeriesDetail : surgeriesDetails) {
            surgeryComboBox.addItem(surgeriesDetail.get(0));
        }
        surgeryComboBox.setSelectedIndex(-1);

        scheduledCheckBox.setSelected(false);
        datePicker.setDate(null);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void savePatientInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatientInfoButtonActionPerformed
        if ("".equals(patientNumberTextField.getText())
                || "".equals(lastNameTextField.getText())
                || "".equals(firstNameTextField.getText())
                || "".equals(birthDayFormattedTextField.getText())
                || "".equals(birthMonthFormattedTextField.getText())
                || "".equals(birthYearFormattedTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "Uno o más campos con datos del paciente estan vacío.",
                    "Error",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }
        String patientId = patientNumberTextField.getText();
        String patientLastName = lastNameTextField.getText();
        String patientFirstName = firstNameTextField.getText();
        String patientRemarks = observationTextArea.getText();

        Utils.PatientGender patientSex;
        if (maleRadioButton.isSelected()) {
            patientSex = Utils.PatientGender.MALE;
        } else if (femaleRadioButton.isSelected()) {
            patientSex = Utils.PatientGender.FEMALE;
        } else {
            patientSex = Utils.PatientGender.OTHER;
        }

        String dayString = birthDayFormattedTextField.getText();
        String monthString = birthMonthFormattedTextField.getText();
        String yearString = birthYearFormattedTextField.getText();
        Date patientBirthDate = null;
        DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
        String dateString = null;

        try {
            int day = Integer.parseInt(dayString);
            int month = Integer.parseInt(monthString);
            int year = Integer.parseInt(yearString);

            Calendar c = Calendar.getInstance();
            c.set(year, month - 1, day);
            patientBirthDate = c.getTime();
            outputFormatter.format(patientBirthDate);

        } catch (NumberFormatException e) {
            patientBirthDate = null;
        }

        new PatientsList().updatePatientInfo("P" + patientId, patientLastName, patientFirstName, patientSex, patientBirthDate, patientRemarks);

        SeePatientListPanel_ES.updateMedicList();
        CreateSchedulePanel_ES.updateMedicList();
        AddNewMedicWindow_ES.updateMedicalLeadComboBox();
        Planning_ES.updateOperationRoomTabbedPanne();
//        SeePatientListPanel_ES.updatePatientListTable(-1, false);
        searchIDButtonActionPerformed(null);

        Object[] obj = {"OK"};
        JOptionPane.showOptionDialog(this, "Los datos del paciente son guardada.",
                "Info",
                JOptionPane.OK_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null, obj, JOptionPane.OK_OPTION);
    }//GEN-LAST:event_savePatientInfoButtonActionPerformed

    private void surgeryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgeryComboBoxActionPerformed
        int idx = surgeryComboBox.getSelectedIndex();
        if (idx < 0) {
            surgeryComboBox.setSelectedIndex(-1);
            pathologyComboBox.removeAllItems();
            pathologyComboBox.setSelectedIndex(-1);
            if (!addSurgeryRadioButton.isSelected()) {
                medicsComboBox.removeAllItems();
                medicalLeadComboBox.removeAllItems();
            }
            return;
        }
        pathologyComboBox.removeAllItems();
        Vector<Vector<String>> surgeriesDetails = new DatabaseQueries().getAllSurgeriesDetails();

        if (surgeriesDetails == null || surgeriesDetails.isEmpty()) {
            surgeryComboBox.setSelectedIndex(-1);
            return;
        }
        for (Vector<String> surgeriesDetail : surgeriesDetails) {
            pathologyComboBox.addItem(surgeriesDetail.get(1));
        }

        if (addSurgeryRadioButton.isSelected()) {
            pathologyComboBox.setSelectedIndex(idx);
        } else {
            medicsComboBox.removeAllItems();
            medicalLeadComboBox.removeAllItems();

            if ("".equals(patientNumberTextField.getText())) {
                //don't do anything else
                return;
            }
            PatientsList patientsInst = new PatientsList();
            int patientID = Integer.parseInt(patientNumberTextField.getText());
            PatientIdentifiers patient = patientsInst.getPatientWithID(patientID, false);
            pathologyComboBox.setSelectedItem(patient.medicalHistory.pathology.get(idx));

            MedicalTeams medicInst = new MedicalTeams();
            MedicIdentifiers medicLead = patient.medicalHistory.doctorTeamLeader.get(idx);
            MedicIdentifiers medicInCharge = patient.medicalHistory.doctorInCharge.get(idx);

            Vector<Vector<String>> teamDetails = medicInst.getAllTeamDetails();
            for (Vector<String> teamDetail : teamDetails) {
                MedicIdentifiers coordinator = medicInst.getCoordinator(Integer.parseInt(teamDetail.get(0).replace("TM", "")));
                if (coordinator == null) {
                    continue;
                }
                medicalLeadComboBox.addItem(coordinator.lastName + " " + coordinator.firstName);
            }
            //this method will call the callback and add the proper medics
            medicalLeadComboBox.setSelectedItem(medicLead.lastName + " " + medicLead.firstName);
            medicsComboBox.setSelectedItem(medicInCharge.lastName + " " + medicInCharge.firstName);

            scheduledCheckBox.setSelected(patient.medicalHistory.scheduled.get(idx));
            datePicker.setDate(patient.medicalHistory.scheduledDate.get(idx));
        }
    }//GEN-LAST:event_surgeryComboBoxActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if ("".equals(patientNumberTextField.getText())
                || "".equals(lastNameTextField.getText())
                || "".equals(firstNameTextField.getText())
                || "".equals(birthDayFormattedTextField.getText())
                || "".equals(birthMonthFormattedTextField.getText())
                || "".equals(birthYearFormattedTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "Uno o más campos con datos del paciente estan vacío.",
                    "Error",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        if (surgeryComboBox.getSelectedIndex() == -1
                || pathologyComboBox.getSelectedIndex() == -1
                || medicalLeadComboBox.getSelectedIndex() == -1
                || medicsComboBox.getSelectedIndex() == -1) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "Uno o más campos con datos del doctores estan vacío.",
                    "Error",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        if (addSurgeryRadioButton.isSelected()) {
            int patientID = Integer.parseInt(patientNumberTextField.getText());
            String patientSurgery = surgeryComboBox.getSelectedItem().toString();
            String patientPathology = pathologyComboBox.getSelectedItem().toString();
            String doctorInChargeName = medicsComboBox.getSelectedItem().toString();
            String doctorLeaderName = medicalLeadComboBox.getSelectedItem().toString();

            MedicalTeams medicInst = new MedicalTeams();
            MedicIdentifiers doctorLeader = medicInst.getDoctorByFullName(doctorLeaderName);
            MedicIdentifiers doctorInCharge = medicInst.getDoctorByFullName(doctorInChargeName);

            //Add the patient or the surgery to the patient
            PatientsList patientsInst = new PatientsList();

            patientsInst.addNewSurgery(patientID,
                    patientSurgery, patientPathology, doctorInCharge, doctorLeader, new Date());

            SeePatientListPanel_ES.updateMedicList();
            CreateSchedulePanel_ES.updateMedicList();
            AddNewMedicWindow_ES.updateMedicalLeadComboBox();
            Planning_ES.updateOperationRoomTabbedPanne();
            resetButtonActionPerformed(null);//reset the fields

            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "Paciente y / o cirugía añadido.",
                    "Info",
                    JOptionPane.OK_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void addSurgeryRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSurgeryRadioButtonActionPerformed
        updateSecondHalfInterface();
    }//GEN-LAST:event_addSurgeryRadioButtonActionPerformed

    private void updateSurgeryRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSurgeryRadioButtonActionPerformed
        updateSecondHalfInterface();
    }//GEN-LAST:event_updateSurgeryRadioButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if ("".equals(patientNumberTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "El campo ID del paciente está vacío.",
                    "Error",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        PatientsList patientsInst = new PatientsList();
        PatientIdentifiers patient = patientsInst.getPatientWithID(
                Integer.parseInt(patientNumberTextField.getText()), false);
        if (patient == null) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "No hay ningún paciente con este ID. "
                    + "Elija la opción de agregar una cirugía para este (nuevo) paciente.",
                    "ID invalido",
                    JOptionPane.OK_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        if (surgeryComboBox.getSelectedIndex() < 0) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "Una cirugía tiene que ser elegido.",
                    "Error cirurgia",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        if (scheduledCheckBox.isSelected() && datePicker.getDate() == null) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "Es necesario establecer una fecha.",
                    "Error fecha",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }
        if (!scheduledCheckBox.isSelected()) {
            datePicker.getMonthView().setLowerBound(new Date());
            datePicker.setDate(null);
        }
        MedicalTeams medicInst = new MedicalTeams();
        MedicIdentifiers lead = medicInst.getDoctorByFullName((String) medicalLeadComboBox.getSelectedItem());
        MedicIdentifiers doctor = medicInst.getDoctorByFullName((String) medicsComboBox.getSelectedItem());

        int opt = JOptionPane.showOptionDialog(this, "¿Está seguro de que desea actualizar la información de la cirugía?",
                "Nuevos datos medicales",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE, null, null, JOptionPane.NO_OPTION);

        if (opt == JOptionPane.YES_OPTION) {
            patientsInst.updateSurgeryDetailsForPatient(patient.patientID, (String) surgeryComboBox.getSelectedItem(),
                    (String) pathologyComboBox.getSelectedItem(), doctor, lead,
                    scheduledCheckBox.isSelected(), datePicker.getDate());
            updateSecondHalfInterface();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void searchIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIDButtonActionPerformed
        if ("".equals(patientNumberTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "El campo \"ID del paciente\" está vacío.",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }
        int patientID;
        try {
            patientID = Integer.parseInt(patientNumberTextField.getText());
        } catch (NumberFormatException e) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "El ID del paciente tiene que ser un número.",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        PatientsList patientsInst = new PatientsList();
        PatientIdentifiers patient = patientsInst.getPatientWithID(patientID, false);
        if (patient == null) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "No hay ningún paciente con esta ID. ",
                    "Info",
                    JOptionPane.OK_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            lastNameTextField.setText("");
            firstNameTextField.setText("");
            birthDayFormattedTextField.setText("");
            birthMonthFormattedTextField.setText("");
            birthYearFormattedTextField.setText("");
            observationTextArea.setText("");
            genderButtonGroup.clearSelection();
        } else {
            lastNameTextField.setText(patient.lastName);
            firstNameTextField.setText(patient.firstName);
            observationTextArea.setText(patient.observations);

            DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
            if (patient.birthDate != null) {
                String birthDateString = outputFormatter.format(patient.birthDate);
                LocalDate birthDate = LocalDate.parse(birthDateString);
                birthDayFormattedTextField.setValue(birthDate.getDayOfMonth());
                birthMonthFormattedTextField.setValue(birthDate.getMonthValue());
                birthYearFormattedTextField.setValue(birthDate.getYear());
            } else {
                birthDayFormattedTextField.setText("");
                birthMonthFormattedTextField.setText("");
                birthYearFormattedTextField.setText("");
            }
            switch (patient.gender) {
                case MALE:
                    maleRadioButton.setSelected(true);
                    femaleRadioButton.setSelected(false);
                    break;
                case FEMALE:
                    maleRadioButton.setSelected(false);
                    femaleRadioButton.setSelected(true);
                    break;
                default:
                    genderButtonGroup.clearSelection();
                    break;
            }
        }
        updateSecondHalfInterface();
    }//GEN-LAST:event_searchIDButtonActionPerformed

    private void patientNumberTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientNumberTextFieldFocusLost
        if ("".equals(patientNumberTextField.getText())) {
            refreshData();
        }
    }//GEN-LAST:event_patientNumberTextFieldFocusLost

    private void patientNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNumberTextFieldActionPerformed
        searchIDButtonActionPerformed(evt);
    }//GEN-LAST:event_patientNumberTextFieldActionPerformed

    private void deleteSurgeryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSurgeryButtonActionPerformed
        // remove the current surgery from patient medical history
        if ("".equals(patientNumberTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "El campo ID del paciente está vacío.",
                    "Id invalido",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        PatientsList patientsInst = new PatientsList();
        PatientIdentifiers patient = patientsInst.getPatientWithID(
                Integer.parseInt(patientNumberTextField.getText()), false);
        if (patient == null) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "No hay ningún paciente con este ID. "
                    + "Elija la opción de agregar una cirugía para este (nuevo) paciente.",
                    "Error",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        if (surgeryComboBox.getSelectedIndex() < 0) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "Una cirugía tiene que ser elegido.",
                    "Info",
                    JOptionPane.OK_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        int opt = JOptionPane.showOptionDialog(null, "¿Está seguro de que quiere eliminar esta cirugía?",
                "¡Advertencia! Extracción de la cirugía",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null, null, JOptionPane.NO_OPTION);

        if (opt == JOptionPane.YES_OPTION) {
            patientsInst.removeSurgeryForPatient(patient.patientID, (String) surgeryComboBox.getSelectedItem());
            updateSecondHalfInterface();
        }
    }//GEN-LAST:event_deleteSurgeryButtonActionPerformed

    private void searchByNameAndBirthdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameAndBirthdateButtonActionPerformed
        if (firstNameTextField == null || lastNameTextField == null
            || patientNumberTextField == null) {
            // This pannel have't been initialised yet.
            return;
        }

        if ("".equals(firstNameTextField.getText())
            && "".equals(lastNameTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "No hay nombre para buscar paciente.",
                "Eror",
                JOptionPane.OK_OPTION,
                JOptionPane.ERROR_MESSAGE,
                null, obj, JOptionPane.OK_OPTION);
            return;
        }
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        String birthDate = "";
        String yearString = birthYearFormattedTextField.getText();
        String monthString = birthMonthFormattedTextField.getText();
        String dayString = birthDayFormattedTextField.getText();

        if (!"".equals(yearString) && !"".equals(monthString)
            && !"".equals(dayString)) {
            birthDate = yearString + "-" + monthString + "-" + dayString;
        }

        Vector<String> patientIds = new DatabaseQueries().getPatientByNameAndBirthdate("".equals(lastName) ? null : lastName,
            "".equals(firstName) ? null : firstName, "".equals(birthDate) ? null : birthDate);

        if(patientIds == null){
            JOptionPane.showConfirmDialog(null, "No se encontraron pacientes con los datos dados",
                "Ningún paciente encontrado", JOptionPane.DEFAULT_OPTION);
            return;
        }

        if(patientIds.size() == 1){
            patientNumberTextField.setText(patientIds.get(0).replace("P", ""));
            searchIDButtonActionPerformed(null);
        } else if(patientIds.size() <= 10){
            String message = "Se encontró el siguiente ID de paciente con los datos dados:\n\n";
            for (String patientId : patientIds) {
                message += patientId.replace("P", "") + "\n";
            }
            message += "\n Complete los campos vacíos y busque de nuevo.";
            JOptionPane.showConfirmDialog(null, message, "Múltiples pacientes encontrados", JOptionPane.DEFAULT_OPTION);
        } else {
            JOptionPane.showConfirmDialog(null, "Se encontraron más de 10 pacientes. Por favor complete los campos vacíos.",
                "Múltiples pacientes encontrados",
                JOptionPane.DEFAULT_OPTION);
        }
    }//GEN-LAST:event_searchByNameAndBirthdateButtonActionPerformed

    public static void refreshData() {
        if (firstNameTextField == null || lastNameTextField == null || patientNumberTextField == null
                || medicalLeadComboBox == null || medicsComboBox == null
                || pathologyComboBox == null || surgeryComboBox == null) {
            // This pannel have't been initialised yet.
            return;
        }

        patientNumberTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        patientNumberTextField.setText("");
        birthDayFormattedTextField.setText("");
        birthMonthFormattedTextField.setText("");
        birthYearFormattedTextField.setText("");
        observationTextArea.setText("");
        scheduledCheckBox.setSelected(false);

        medicalLeadComboBox.removeAllItems();
        MedicalTeams medicInst = new MedicalTeams();

        Vector<Vector<String>> teamDetails = medicInst.getAllTeamDetails();
        for (Vector<String> teamDetail : teamDetails) {
            MedicIdentifiers coordinator = medicInst.getCoordinator(Integer.parseInt(teamDetail.get(0).replace("TM", "")));
            if (coordinator == null) {
                continue;
            }
            medicalLeadComboBox.addItem(coordinator.lastName + " " + coordinator.firstName);
        }
        medicalLeadComboBox.setSelectedIndex(-1);
        medicsComboBox.removeAllItems();

        //do the same for pathology and surgery
        surgeryComboBox.removeAllItems();
        pathologyComboBox.removeAllItems();
        pathologyComboBox.setSelectedIndex(-1);

        Vector<Vector<String>> surgeriesDetails = new DatabaseQueries().getAllSurgeriesDetails();

        if (surgeriesDetails == null || surgeriesDetails.isEmpty()) {
            surgeryComboBox.setSelectedIndex(-1);
            return;
        }

        for (Vector<String> surgeriesDetail : surgeriesDetails) {
            surgeryComboBox.addItem(surgeriesDetail.get(0));
        }
        surgeryComboBox.setSelectedIndex(-1);
        datePicker.setDate(null);
    }

    public static void updateSecondHalfInterface() {
        surgeryComboBox.removeAllItems();
        pathologyComboBox.removeAllItems();
        medicalLeadComboBox.removeAllItems();
        medicsComboBox.removeAllItems();

        MedicalTeams medicInst = new MedicalTeams();

        Vector<Vector<String>> teamDetails = medicInst.getAllTeamDetails();
        for (Vector<String> teamDetail : teamDetails) {
            MedicIdentifiers coordinator = medicInst.getCoordinator(Integer.parseInt(teamDetail.get(0).replace("TM", "")));
            if (coordinator == null) {
                continue;
            }
            medicalLeadComboBox.addItem(coordinator.lastName + " " + coordinator.firstName);
        }
        medicalLeadComboBox.setSelectedIndex(-1);

        if (addSurgeryRadioButton.isSelected()) {
            pathologyComboBox.setSelectedIndex(-1);

            Vector<Vector<String>> surgeriesDetails = new DatabaseQueries().getAllSurgeriesDetails();

            if (surgeriesDetails == null || surgeriesDetails.isEmpty()) {
                surgeryComboBox.setSelectedIndex(-1);
                return;
            }

            for (Vector<String> surgeriesDetail : surgeriesDetails) {
                surgeryComboBox.addItem(surgeriesDetail.get(0));
            }
            surgeryComboBox.setSelectedIndex(-1);

            scheduledCheckBox.setEnabled(false);
            dateLabel.setEnabled(false);
            datePicker.setEnabled(false);
            saveButton.setEnabled(false);
            deleteSurgeryButton.setEnabled(false);
            addButton.setEnabled(true);
        } else {
            scheduledCheckBox.setEnabled(true);
            dateLabel.setEnabled(true);
            datePicker.setEnabled(true);
            saveButton.setEnabled(true);
            deleteSurgeryButton.setEnabled(true);
            addButton.setEnabled(false);

            if ("".equals(patientNumberTextField.getText())) {
                //don't do anything else
                return;
            }

            PatientsList patientsInst = new PatientsList();
            PatientIdentifiers patient = patientsInst.getPatientWithID(
                    Integer.parseInt(patientNumberTextField.getText()), false);
            if (patient == null) {
                return;
            }

            Vector<String> srg = patient.medicalHistory.surgery;
            for (int i = 0; i < srg.size(); i++) {
                surgeryComboBox.addItem(srg.get(i));
            }
            surgeryComboBox.setSelectedIndex(-1);
        }
        scheduledCheckBox.setSelected(false);
        datePicker.setDate(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton addButton;
    private static javax.swing.JRadioButton addSurgeryRadioButton;
    private static javax.swing.JFormattedTextField birthDayFormattedTextField;
    private static javax.swing.JFormattedTextField birthMonthFormattedTextField;
    private static javax.swing.JFormattedTextField birthYearFormattedTextField;
    private static javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateOfBirthLabel;
    private static org.jdesktop.swingx.JXDatePicker datePicker;
    private static javax.swing.JButton deleteSurgeryButton;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JLabel firstNameLabel;
    private static javax.swing.JTextField firstNameTextField;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lastNameLabel;
    private static javax.swing.JTextField lastNameTextField;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JLabel medicLabel;
    private static javax.swing.JComboBox<String> medicalLeadComboBox;
    private javax.swing.JLabel medicalTeamLabel;
    private static javax.swing.JComboBox<String> medicsComboBox;
    private static javax.swing.JTextArea observationTextArea;
    private javax.swing.JLabel observationsLabel;
    private static javax.swing.JComboBox<String> pathologyComboBox;
    private javax.swing.JLabel patientNumberLabel;
    private static javax.swing.JTextField patientNumberTextField;
    private javax.swing.JLabel patologyLabel;
    private static javax.swing.JButton resetButton;
    private static javax.swing.JButton saveButton;
    private javax.swing.JButton savePatientInfoButton;
    private static javax.swing.JCheckBox scheduledCheckBox;
    private javax.swing.JButton searchByNameAndBirthdateButton;
    private javax.swing.JButton searchIDButton;
    private static javax.swing.JComboBox<String> surgeryComboBox;
    private javax.swing.JLabel surgeryLabel;
    private static javax.swing.JRadioButton updateSurgeryRadioButton;
    // End of variables declaration//GEN-END:variables
}
