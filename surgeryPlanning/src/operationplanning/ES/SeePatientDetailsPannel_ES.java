/*
 * Copyright (C) 2017 Diana Botez <dia.botez at gmail.com> - All Rights Reserved
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * Althering the content of this licence under any circumstances is
 * strictly forbidden.
 * This application is part of a project developed during ERASMUS+ mobility
 * at University of Zaragoza, Spain.
 * This application is open-source and is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. 
 * 
 */
package operationplanning.ES;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
import operationplanning.commonFiles.DatabaseQueries;
import operationplanning.commonFiles.MedicIdentifiers;
import operationplanning.commonFiles.MyUneditableTableModel;
import operationplanning.commonFiles.PatientIdentifiers;
import operationplanning.commonFiles.PatientsList;

/**
 *
 * @author Diana Botez <dia.botez at gmail.com>
 */
public class SeePatientDetailsPannel_ES extends javax.swing.JPanel {

    private static MyUneditableTableModel patientDetailsTableModel_ES;

    /**
     * Creates new form SeePatientDetailsPannel_EN
     */
    public SeePatientDetailsPannel_ES() {
        patientDetailsTableModel_ES = new MyUneditableTableModel(
                new String[]{"Índice", "Cirugía", "Patología", "Doctor", "Coordinador", "Fecha de admisión", "Fecha programado", "Programado", "Terminado"},
                0) //<editor-fold defaultstate="collapsed" desc="set column classes">
        {
            @Override
            public Class getColumnClass(int col) {
                String name = patientDetailsTableModel_ES.getColumnName(col);

                if (name.equals("Fecha de admisión") || name.equals("Fecha programado")) {
                    return Date.class;
                } else {
                    return java.lang.String.class;
                }
            }
        } //</editor-fold> //</editor-fold>
                ;

        initComponents();

        TableRowSorter<MyUneditableTableModel> sorter = new TableRowSorter<>(patientDetailsTableModel_ES);
        patientDetailsTable.setRowSorter(sorter);
        sorter.setSortable(0, false);
        refreshData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientNumberLabel = new javax.swing.JLabel();
        patientNumberTextField = new javax.swing.JTextField();
        searchIDButton = new javax.swing.JButton();
        dateOfBirthLabel = new javax.swing.JLabel();
        birthDayFormattedTextField = new javax.swing.JFormattedTextField();
        birthMonthFormattedTextField = new javax.swing.JFormattedTextField();
        birthYearFormattedTextField = new javax.swing.JFormattedTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        searchByNameAndBirthdateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientDetailsTable = new javax.swing.JTable();
        resetButton = new javax.swing.JButton();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });

        patientNumberLabel.setText("ID del paciente");
        patientNumberLabel.setMaximumSize(new java.awt.Dimension(108000, 40));
        patientNumberLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        patientNumberLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        patientNumberTextField.setToolTipText("Add the patient number to be searched in the data base");
        patientNumberTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        patientNumberTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        patientNumberTextField.setPreferredSize(new java.awt.Dimension(350, 30));
        patientNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNumberTextFieldActionPerformed(evt);
            }
        });

        searchIDButton.setText("Búsqueda por ID");
        searchIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIDButtonActionPerformed(evt);
            }
        });

        dateOfBirthLabel.setText("Fecha de nacimiento (dd / mm / aaaa)");

        birthDayFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthMonthFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthYearFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        lastNameLabel.setText("Apellido");
        lastNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        lastNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        lastNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        lastNameTextField.setToolTipText("The last name of the patient");
        lastNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        lastNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        lastNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        firstNameLabel.setText("Nombre");
        firstNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        firstNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        firstNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        firstNameTextField.setToolTipText("The first name of the patient");
        firstNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        firstNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        firstNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        searchByNameAndBirthdateButton.setText("Búsqueda por nombre (y fecha de nacimiento)");
        searchByNameAndBirthdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameAndBirthdateButtonActionPerformed(evt);
            }
        });

        patientDetailsTable.setModel(patientDetailsTableModel_ES);
        jScrollPane2.setViewportView(patientDetailsTable);

        resetButton.setText("Reiniciar");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateOfBirthLabel)
                        .addGap(18, 18, 18)
                        .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchByNameAndBirthdateButton)
                        .addGap(0, 31, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(patientNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchIDButton))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lastNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchIDButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateOfBirthLabel)
                    .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByNameAndBirthdateButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNumberTextFieldActionPerformed
        searchIDButtonActionPerformed(evt);
    }//GEN-LAST:event_patientNumberTextFieldActionPerformed

    private void searchIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIDButtonActionPerformed
        if ("".equals(patientNumberTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "El campo \"ID del paciente\" está vacío.",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }
        int patientID;
        try {
            patientID = Integer.parseInt(patientNumberTextField.getText());
        } catch (NumberFormatException e) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "El ID del paciente tiene que ser un número.",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }

        PatientsList patientsInst = new PatientsList();
        PatientIdentifiers patient = patientsInst.getPatientWithID(patientID, true);
        if (patient == null) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "No hay ningún paciente con este ID",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);

            lastNameTextField.setText("");
            firstNameTextField.setText("");
            birthDayFormattedTextField.setText("");
            birthMonthFormattedTextField.setText("");
            birthYearFormattedTextField.setText("");
            return;
        }

        lastNameTextField.setText(patient.lastName);
        firstNameTextField.setText(patient.firstName);

        DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
        if (patient.birthDate != null) {
            String birthDateString = outputFormatter.format(patient.birthDate);
            LocalDate birthDate = LocalDate.parse(birthDateString);
            birthDayFormattedTextField.setValue(birthDate.getDayOfMonth());
            birthMonthFormattedTextField.setValue(birthDate.getMonthValue());
            birthYearFormattedTextField.setValue(birthDate.getYear());
        } else {
            birthDayFormattedTextField.setText("");
            birthMonthFormattedTextField.setText("");
            birthYearFormattedTextField.setText("");
        }
        while (patientDetailsTableModel_ES.getRowCount() > 0) {
            patientDetailsTableModel_ES.removeRow(0);
        }

        int surgeriesNo = patient.medicalHistory.surgery.size();

        for (int i = 0; i < surgeriesNo; i++) {
            MedicIdentifiers doctorInCharge = patient.medicalHistory.doctorInCharge.get(i);
            MedicIdentifiers doctorTeamLeader = patient.medicalHistory.doctorTeamLeader.get(i);

            if (patient.medicalHistory.scheduled.get(i)) {
                patientDetailsTableModel_ES.addRow(new Object[]{i + 1,
                    patient.medicalHistory.surgery.get(i),
                    patient.medicalHistory.pathology.get(i),
                    doctorInCharge.lastName + " " + doctorInCharge.firstName,
                    doctorTeamLeader.lastName + " " + doctorTeamLeader.firstName,
                    patient.medicalHistory.admissionDate.get(i),
                    patient.medicalHistory.scheduledDate.get(i),
                    (patient.medicalHistory.scheduled.get(i) ? "Si" : "No"),
                    (patient.medicalHistory.complited.get(i) ? "Si" : "No")});
            } else {
                patientDetailsTableModel_ES.addRow(new Object[]{i + 1,
                    patient.medicalHistory.surgery.get(i),
                    patient.medicalHistory.pathology.get(i),
                    doctorInCharge.lastName + " " + doctorInCharge.firstName,
                    doctorTeamLeader.lastName + " " + doctorTeamLeader.firstName,
                    patient.medicalHistory.admissionDate.get(i),
                    null,
                    "No",
                    "No"});
            }
        }
    }//GEN-LAST:event_searchIDButtonActionPerformed

    private void searchByNameAndBirthdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameAndBirthdateButtonActionPerformed
        if (firstNameTextField == null || lastNameTextField == null
                || patientNumberTextField == null) {
            // This pannel have't been initialised yet.
            return;
        }

        if ("".equals(firstNameTextField.getText())
                && "".equals(lastNameTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(this, "No hay nombre para buscar paciente.",
                    "Eror",
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, JOptionPane.OK_OPTION);
            return;
        }
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        String birthDate = "";
        String yearString = birthYearFormattedTextField.getText();
        String monthString = birthMonthFormattedTextField.getText();
        String dayString = birthDayFormattedTextField.getText();
        
        if (!"".equals(yearString) && !"".equals(monthString)
                && !"".equals(dayString)) {
            birthDate = yearString + "-" + monthString + "-" + dayString;
        }

        Vector<String> patientIds = new DatabaseQueries().getPatientByNameAndBirthdate("".equals(lastName) ? null : lastName,
                "".equals(firstName) ? null : firstName, "".equals(birthDate) ? null : birthDate);

        if(patientIds == null){
            JOptionPane.showConfirmDialog(null, "No se encontraron pacientes con los datos dados", 
                    "Ningún paciente encontrado", JOptionPane.DEFAULT_OPTION);
            return;
        }

        if(patientIds.size() == 1){
            patientNumberTextField.setText(patientIds.get(0).replace("P", ""));
            searchIDButtonActionPerformed(null);
        } else if(patientIds.size() <= 10){
            String message = "Se encontró el siguiente ID de paciente con los datos dados:\n\n";
            for (String patientId : patientIds) {
                message += patientId.replace("P", "") + "\n";
            }
            message += "\n Complete los campos vacíos y busque de nuevo.";
            JOptionPane.showConfirmDialog(null, message, "Múltiples pacientes encontrados", JOptionPane.DEFAULT_OPTION);
        } else {
            JOptionPane.showConfirmDialog(null, "Se encontraron más de 10 pacientes. Por favor complete los campos vacíos.",
                    "Múltiples pacientes encontrados",
                    JOptionPane.DEFAULT_OPTION);
        }

    }//GEN-LAST:event_searchByNameAndBirthdateButtonActionPerformed

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        refreshData();
    }//GEN-LAST:event_formFocusLost

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        refreshData();
    }//GEN-LAST:event_resetButtonActionPerformed

    public static void refreshData() {
        if (firstNameTextField == null || lastNameTextField == null
                || patientNumberTextField == null) {
            // This pannel have't been initialised yet.
            return;
        }

        firstNameTextField.setText("");
        lastNameTextField.setText("");
        patientNumberTextField.setText("");
        birthDayFormattedTextField.setText("");
        birthMonthFormattedTextField.setText("");
        birthYearFormattedTextField.setText("");

        while (patientDetailsTableModel_ES.getRowCount() > 0) {
            patientDetailsTableModel_ES.removeRow(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JFormattedTextField birthDayFormattedTextField;
    private static javax.swing.JFormattedTextField birthMonthFormattedTextField;
    private static javax.swing.JFormattedTextField birthYearFormattedTextField;
    private javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JLabel firstNameLabel;
    private static javax.swing.JTextField firstNameTextField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lastNameLabel;
    private static javax.swing.JTextField lastNameTextField;
    private javax.swing.JTable patientDetailsTable;
    private javax.swing.JLabel patientNumberLabel;
    private static javax.swing.JTextField patientNumberTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchByNameAndBirthdateButton;
    private javax.swing.JButton searchIDButton;
    // End of variables declaration//GEN-END:variables
}
