/*
 * Copyright (C) 2017 diana - All Rights Reserved
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * Althering the content of this licence under any circumstances is
 * strictly forbidden.
 * This application is part of a project developed during ERASMUS+ mobility
 * at University of Zaragoza, Spain.
 * This application is open-source and is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. 
 * 
 */
package operationplanning.ES;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import operationplanning.commonFiles.DatabaseQueries;
import operationplanning.commonFiles.PatientsList;
import operationplanning.commonFiles.Utils;

/**
 *
 * @author diana
 */
public class AddNewPatientPanel_ES extends javax.swing.JPanel {

    /**
     * Creates new form addNewPatientPannel_EN
     */
    public AddNewPatientPanel_ES() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        savePatientInfoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTextArea = new javax.swing.JTextArea();
        observationsLabel = new javax.swing.JLabel();
        birthDayFormattedTextField = new javax.swing.JFormattedTextField();
        birthMonthFormattedTextField = new javax.swing.JFormattedTextField();
        birthYearFormattedTextField = new javax.swing.JFormattedTextField();
        dateOfBirthLabel = new javax.swing.JLabel();
        femaleRadioButton = new javax.swing.JRadioButton();
        maleRadioButton = new javax.swing.JRadioButton();
        GenderLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();

        savePatientInfoButton.setText("Agregar información del paciente");
        savePatientInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatientInfoButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        observationTextArea.setColumns(20);
        observationTextArea.setLineWrap(true);
        observationTextArea.setRows(5);
        jScrollPane1.setViewportView(observationTextArea);

        observationsLabel.setText("Observaciones");

        birthDayFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthMonthFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        birthYearFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        dateOfBirthLabel.setText("Fecha de nacimiento (dd / mm / aaaa)");

        genderButtonGroup.add(femaleRadioButton);
        femaleRadioButton.setText("Mujer");

        genderButtonGroup.add(maleRadioButton);
        maleRadioButton.setSelected(true);
        maleRadioButton.setText("Hombre");

        GenderLabel.setText("Género");

        firstNameLabel.setText("Nombre");
        firstNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        firstNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        firstNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        lastNameLabel.setText("Apellido");
        lastNameLabel.setMaximumSize(new java.awt.Dimension(200, 40));
        lastNameLabel.setMinimumSize(new java.awt.Dimension(150, 30));
        lastNameLabel.setPreferredSize(new java.awt.Dimension(150, 30));

        lastNameTextField.setToolTipText("The last name of the patient");
        lastNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        lastNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        lastNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        firstNameTextField.setToolTipText("The first name of the patient");
        firstNameTextField.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        firstNameTextField.setMinimumSize(new java.awt.Dimension(350, 30));
        firstNameTextField.setPreferredSize(new java.awt.Dimension(350, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(GenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(maleRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(femaleRadioButton))
                    .addComponent(observationsLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateOfBirthLabel)
                        .addGap(18, 18, 18)
                        .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(savePatientInfoButton)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(226, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(23, 23, 23)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(femaleRadioButton)
                    .addComponent(maleRadioButton)
                    .addComponent(GenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateOfBirthLabel)
                    .addComponent(birthDayFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthMonthFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthYearFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(observationsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(savePatientInfoButton)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(377, 377, 377)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void savePatientInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatientInfoButtonActionPerformed
        if (/*"".equals(patientNumberTextField.getText())
            ||*/"".equals(lastNameTextField.getText())
            || "".equals(firstNameTextField.getText())
            || "".equals(birthDayFormattedTextField.getText())
            || "".equals(birthMonthFormattedTextField.getText())
            || "".equals(birthYearFormattedTextField.getText())) {
            Object[] obj = {"OK"};
            JOptionPane.showOptionDialog(null, "Uno o más campos están vacíos.",
                "Eror",
                JOptionPane.OK_OPTION,
                JOptionPane.ERROR_MESSAGE,
                null, obj, JOptionPane.OK_OPTION);
            return;
        }
        String patientLastName = lastNameTextField.getText();
        String patientFirstName = firstNameTextField.getText();
        String patientRemarks = observationTextArea.getText();

        Utils.PatientGender patientSex;
        if (maleRadioButton.isSelected()) {
            patientSex = Utils.PatientGender.MALE;
        } else if (femaleRadioButton.isSelected()) {
            patientSex = Utils.PatientGender.FEMALE;
        } else {
            patientSex = Utils.PatientGender.OTHER;
        }

        String dayString = birthDayFormattedTextField.getText();
        String monthString = birthMonthFormattedTextField.getText();
        String yearString = birthYearFormattedTextField.getText();
        Date patientBirthDate = null;
        DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
        String dateString = null;

        try {
            int day = Integer.parseInt(dayString);
            int month = Integer.parseInt(monthString);
            int year = Integer.parseInt(yearString);

            Calendar c = Calendar.getInstance();
            c.set(year, month - 1, day);
            patientBirthDate = c.getTime();
            dateString = outputFormatter.format(patientBirthDate);

        } catch (NumberFormatException e) {
            patientBirthDate = null;
        }

        boolean result = new PatientsList().addPatientInfo(patientLastName, patientFirstName, patientSex, patientBirthDate, patientRemarks);

        if(!result){
            String existingPatientId = new DatabaseQueries().getPatientByNameAndBirthdate(patientLastName, patientFirstName, dateString).get(0);
            Object[] obj={"Ok"};
            JOptionPane.showOptionDialog(null, "Hay un paciente con estos detalles.\n"
                    + "El ID del paciente es: " + existingPatientId.replace("P", ""), 
                    "Error al agregar el paciente", 
                    JOptionPane.OK_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null, obj, obj[0]);
            
            return;
        }
        
        SeePatientListPanel_ES.updateMedicList();
        CreateSchedulePanel_ES.updateMedicList();
        AddNewMedicWindow_ES.updateMedicalLeadComboBox();
        Planning_ES.updateOperationRoomTabbedPanne();
        //        SeePatientListPanel_EN.updatePatientListTable(-1, false);

        Object[] obj = {"OK"};
        JOptionPane.showOptionDialog(this, "Los datos del paciente se guardan.",
            "Información",
            JOptionPane.OK_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null, obj, JOptionPane.OK_OPTION);
    }//GEN-LAST:event_savePatientInfoButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GenderLabel;
    private static javax.swing.JFormattedTextField birthDayFormattedTextField;
    private static javax.swing.JFormattedTextField birthMonthFormattedTextField;
    private static javax.swing.JFormattedTextField birthYearFormattedTextField;
    private javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JLabel firstNameLabel;
    private static javax.swing.JTextField firstNameTextField;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastNameLabel;
    private static javax.swing.JTextField lastNameTextField;
    private javax.swing.JRadioButton maleRadioButton;
    private static javax.swing.JTextArea observationTextArea;
    private javax.swing.JLabel observationsLabel;
    private javax.swing.JButton savePatientInfoButton;
    // End of variables declaration//GEN-END:variables
}
